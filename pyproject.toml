[tool.poetry]
name = "analitiq"
version = "0.1.0"
homepage = "https://analitiq.ai"
repository = "https://github.com/analitiq-ai/analitiq"
documentation = "https://analitiq-ai.github.io/analitiq/"
description = "A framework for managing your data using LLMs."
authors = ["Kirill Andriychuk <kirill@analitiq.ai>"]
license = "MIT"
keywords = ["analitiq", "llms", "data management", "nl2sql"]
readme = "README.md"

classifiers= [
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Natural Language :: English',
        'Programming Language :: Python :: 3.10'
    ]
packages = [
    {include = "analitiq", from = "./libs" }
]


[tool.ruff]
line-length = 110

[tool.ruff.lint.per-file-ignores]
"libs/tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # Accessed private Member
]
"noxfile.py" = [
  "ERA001" # find commented out code
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = [
  'E',      # pycodestyle errors
  'W',      # pycodestyle warnings
  'F',      # Pyflakes
  'D',      # pydocstyle
  'B',      # flake8-bugbear
  'A',      # flake8-builtins
  'COM',    # flake8-commas
  'C4',     # flake8-comprehensions
  'EM',     # flake8-errmsg
  'ISC',    # flake8-implicit-str-concat
  'INP001', # flake8-no-pep420
  'PIE',    # flake8-pie
  'T20',    # flake8-print
  'PYI',    # flake8-pyi
  'Q',      # flake8-quotes
  'RSE',    # flake8-raise
  'SLF',    # flake8-self
  'PTH',    # flake8-use-pathlib
  'SIM',    # flake8-simplify
  'S101',   # Use of assert detected
  'S102',   # Use of exec detected
  'S110',   #	try-except-pass detected, consider logging the exception
  'S112',   # try-except-continue detected, consider logging the exception
  # 'FIX',    # Line contains TODO
  'ERA',    # eradicate
  'PL',     # Pylint
  'PERF',   # Perflint
  'RUF',
]
ignore = [
  'D100',    # Missing docstring in public module
  'D104',    # Missing docstring in public package
  'D415',    # First line should end with a period
  'D416',    # section-name-ends-in-colon
  'SIM108',  # Check for if-else-blocks that can be replaced with a ternary operator.
  'PTH123',  # open()` should be replaced by `Path.open()
  'PLR091',  # Too many x
  'PLR1714', # Consider merging multiple comparisons
  'PERF401', # Use a list comprehension to create a transformed list
  'PERF203', # Checks for uses of except handling via try-except within for and while loops.
  'RUF005',  # Consider `[*arr, 'new_item']` instead of concatenation
  'COM812',
  'ISC001',
  'D203',
  'D213',
]
task-tags = ["TODO"]

[tool.poetry.dependencies]
python = "^3.10"
boto3 = "1.34.113"
langchain = "0.2.1"
langchain-aws = "0.1.6"
langchain-community = "0.2.1"
langchain-core = "0.2.1"
langchain-mistralai = "0.1.7"
langchain-openai = "0.1.7"
langchain-text-splitters = "0.2.0"
pandas = "^2.2.3"
pyyaml = "6.0.1"
sqlalchemy = "^2.0.36"
#sqlalchemy-redshift = "0.8.14"
typing-inspect = "0.9.0"
typing-extensions = "4.8.0"
pydantic = "2.5.1"
weaviate-client = "^4.9.3"
redshift-connector = "2.1.1"
tabulate = "0.9.0"
psycopg2-binary = "2.9.9"
json-log-formatter = "^1.0"
transformers = "^4.41.2"
nltk = ">=3.9"
sqlparse = "^0.5.1"
torch = "^2.3.1"

[tool.poetry.group.dev.dependencies]
pytest-mock = "^1.11"
python-dotenv = "^1.0.1"
pylint = "^3.2.6"
nox = "^2024.4.15"
ruff = "^0.5.7"
mypy = "^1.11.1"
pytest-coverage = "^0.0"
pytest-timeout = "^2.3.1"
pytest = "^8.3.2"
black = "^24.8.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material-extensions = "^1.3.1"
mkdocs-material = "^9.5.26"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["./libs", "."]
