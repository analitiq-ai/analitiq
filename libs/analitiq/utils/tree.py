from pathlib import Path

# prefix components:
space = '    '
branch = '│   '
# pointers:
tee = '├── '
last = '└── '


def tree(dir_path: Path, prefix: str=''):
    """
    :param dir_path: The path of the directory to be traversed.
    :param prefix: The prefix to be added before each file/folder name in the tree structure.
    :return: A generator that yields each line of the tree structure in a formatted way.

    This method takes a directory path and a prefix as input parameters and returns a generator that yields each line of the tree structure as a string. The tree structure is generated by
    * traversing the directory recursively. Each file/folder name is indented and prefixed with appropriate symbols to represent the hierarchy.

    Example Usage:
    ```
    from pathlib import Path

    # Create a Path object for the directory
    dir_path = Path('/path/to/directory')

    # Generate the tree structure
    tree_generator = tree(dir_path)

    # Iterate over the generator and print each line
    for line in tree_generator:
        print(line)
    ```
    """
    prefixes = ['.', '__', 'venv', 'env']
    contents = list(dir_path.iterdir())
    # contents each get pointers that are ├── with a final └── :
    pointers = [tee] * (len(contents) - 1) + [last]
    for pointer, path in zip(pointers, contents):
        if any(path.name.startswith(prefix) for prefix in prefixes):
            continue
        yield prefix + pointer + path.name
        if path.is_dir(): # extend the prefix and recurse:
            extension = branch if pointer == tee else space
            # i.e. space because last, └── , above so no more |
            yield from tree(path, prefix=prefix+extension)


if __name__ == '__main__':
    # Create a Path object for the directory
    dir_path = Path('/Users/kirillandriychuk/Documents/Projects/analitiq')

    # Generate the tree structure
    tree_generator = tree(dir_path)

    # Iterate over the generator and print each line
    for line in tree_generator:
        print(line)